package icecube.daq.eventBuilder.test;

import icecube.daq.common.DAQCmdInterface;
import icecube.daq.common.DAQComponentInputProcess;
import icecube.daq.common.DAQdataChannelMBean;

import icecube.daq.eventBuilder.EventBuilderGlobalTrigPayloadInputEngine;
import icecube.daq.eventBuilder.EventBuilderManager;
import icecube.daq.eventBuilder.RequestPayloadOutputEngine;
import icecube.daq.eventBuilder.SPDataAnalysis;

import icecube.daq.eventBuilder.backend.EventBuilderBackEnd;

import icecube.daq.payload.ByteBufferCache;
import icecube.daq.payload.IByteBufferCache;
import icecube.daq.payload.IPayloadDestinationCollection;
import icecube.daq.payload.ISourceID;
import icecube.daq.payload.MasterPayloadFactory;

import icecube.daq.payload.impl.SourceID4B;

import icecube.daq.payload.splicer.Payload;

import icecube.daq.splicer.SplicerImpl;

import icecube.daq.testUtil.InputSource;
import icecube.daq.testUtil.EventInputSourceGenerator;

import java.nio.ByteBuffer;

import java.nio.channels.Pipe;

import java.util.ArrayList;
import java.util.Date;
import java.util.Vector;

import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.framework.Test;

class MockRequestPayloadOutputEngine
    implements RequestPayloadOutputEngine
{
    public static final int[] idList = new int[] { 2000, 2001, 2002, 2003, 3000 };

    private int[] sentList = new int[idList.length];
    private MockPayloadDestinationCollection destColl;

    MockRequestPayloadOutputEngine()
    {
        ArrayList srcIdList = new ArrayList();

        for (int i = 0; i < idList.length; i++) {
            // TODO: should use SourceIdRegistry to generate IDs
            srcIdList.add(new SourceID4B(idList[i]));
            sentList[i] = 0;
        }

        destColl = new MockPayloadDestinationCollection();
        destColl.setSourceIDs(srcIdList);
    }

    public int getNumSent(int id)
    {
        for (int i = 0; i < idList.length; i++) {
            if (idList[i] == id) {
                return sentList[i];
            }
        }

        return -1;
    }

    public IPayloadDestinationCollection getPayloadDestinationCollection()
    {
        return destColl;
    }

    public void registerBufferManager(IByteBufferCache bufMgr)
    {
        // do nothing
    }

    public void sendLastAndStop()
    {
        // do nothing
    }

    public String toString()
    {
        StringBuffer buf = new StringBuffer("MockReqOut Sent[");
        for (int i = 0; i < sentList.length; i++) {
            if (i > 0) {
                buf.append(',');
            }
            buf.append(sentList[i]);
        }
        buf.append(']');

        return buf.toString();
    }
}

public class EventBuilderGlobalTrigPayloadInputEngineTest
    extends TestCase
{
    private static final String NOTIFICATION_ID = "TestId";

    private static MasterPayloadFactory masterFactory =
        new MasterPayloadFactory();

    private EventBuilderGlobalTrigPayloadInputEngine engine;
    private EventBuilderBackEnd backEnd;
    private EventInputSourceGenerator evtGen;

    public EventBuilderGlobalTrigPayloadInputEngineTest(String name)
    {
        super(name);
    }

    private static final void
        addInputChannel(InputSource inputSrc, int id, String farEndType,
                        DAQComponentInputProcess inputProc)
        throws Exception
    {
        DAQdataChannelMBean dcInputSink =
            new DAQdataChannelMBean(null, null, id, null, null);

        dcInputSink.setFarEndType(farEndType);
        dcInputSink.setFarEndID(id);

        dcInputSink.setChannelType(DAQdataChannelMBean.DAQ_READ_CHANNEL);

        dcInputSink.setSelectableChannel(inputSrc.getSourceChannel());

        inputProc.addDataChannel(dcInputSink);
    }

    protected void setUp()
    {
        ByteBufferCache bufMgr =
            new ByteBufferCache(256, 60000000, 60000000,
                                "EventBuilderGlobalTrigPayloadInputEngineTest");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        EventBuilderManager ebMgr = new EventBuilderManager();
        //ebMgr.setMonitoringData(monData);
        ebMgr.setDAQRunNumber(0);

        SPDataAnalysis splicedAnalysis =
            new SPDataAnalysis(masterFactory, ebMgr);
        SplicerImpl splicer = new SplicerImpl(splicedAnalysis);
        splicer.addSplicerListener(splicedAnalysis);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);

        backEnd = new EventBuilderBackEnd(masterFactory, bufMgr, splicer,
                                          splicedAnalysis, dispatcher);

        engine = new EventBuilderGlobalTrigPayloadInputEngine(null, "gtIn", 0,
                                                              "test", backEnd,
                                                              bufMgr,
                                                              masterFactory);
    }

    public static Test suite()
    {
        return new TestSuite(EventBuilderGlobalTrigPayloadInputEngineTest.class);
    }

    protected void tearDown()
    {
        if (evtGen != null) {
            try {
                evtGen.stopProcessing();
            } catch (Exception ex) {
                // ignore shutdown errors
            }
        }

        if (engine.isRunning()) {
            engine.forcedStopProcessing();
        }

        try {
            engine.destroyProcessor();
        } catch (Exception ex) {
            // ignore shutdown errors
        }
    }

    public void testStartStop()
        throws Exception
    {
        final int GLOBAL_TRIG_STOP_MULTIPLIER = 2;

        MockDAQComponentProcessManager procMgr =
            new MockDAQComponentProcessManager();

        assertTrue("PayloadInputEngine is not stopped", engine.isStopped());

        engine.registerStopNotificationCallback(procMgr, NOTIFICATION_ID);
        engine.registerErrorNotificationCallback(procMgr, NOTIFICATION_ID);

        engine.start();

        for (int i = 0; i < 3; i++) {
            engine.startProcessing();
            assertTrue("PayloadInputEngine not started on try #" + i,
                       engine.isRunning());

            engine.forcedStopProcessing();

            for (int tries = 0; !engine.isStopped() && tries < 3; tries++) {
                try { Thread.sleep(100); } catch (Exception ex) { }
            }

            assertTrue("PayloadInputEngine not stopped on try #" + i,
                       engine.isStopped());
            assertEquals("Unexpected number of stop messages",
                         (i + 1) * GLOBAL_TRIG_STOP_MULTIPLIER,
                         engine.getTotalGlobalTrigStopsReceived());
        }

        assertEquals("Should not have received any messages",
                     0, engine.getReceivedMessages());
        assertEquals("Should have received one stop message",
                     1, engine.getStopMessagesPropagated());
        assertEquals("Should not have received any unpacking errors",
                     0, engine.getDequeueErrors());

        engine.destroyProcessor();

        try {
            engine.startProcessing();
            fail("PayloadInputEngine restarted after destroyProcessor");
        } catch (Exception ex) {
            // expect this to fail
        }
    }

    public void testOutputInput()
        throws Exception
    {
        MockDAQComponentProcessManager procMgr =
            new MockDAQComponentProcessManager();
        engine.registerStopNotificationCallback(procMgr, NOTIFICATION_ID);

        MockRequestPayloadOutputEngine reqOutEngine =
            new MockRequestPayloadOutputEngine();
        engine.registerStringProcReqOutputEngine(reqOutEngine);

        engine.start();

        assertTrue("PayloadInputEngine not stopped after creation",
                    engine.isStopped());

        final int expNumSent = 10;

        evtGen = new EventInputSourceGenerator();
        evtGen.setNumOfHits(expNumSent);
        evtGen.setTargetSourceIds(new int[] { 12, 34, 56 });
        evtGen.setWriteHits(false);

        addInputChannel(evtGen.getTriggerRequestSource(), 1,
                        DAQCmdInterface.DAQ_GLOBAL_TRIGGER,
                        engine);

        engine.startProcessing();
        assertTrue("PayloadInputEngine not running after startup",
                   engine.isRunning());

        evtGen.startProcessing();

        while (evtGen.isRunning() ||
               backEnd.getNumRequestsReceived() < expNumSent)
        {
            engine.inputAvailable.release();

            try { Thread.sleep(200); } catch (Exception ex) { }
        }
    }

    public static final void main(String[] args)
    {
        junit.textui.TestRunner.run(suite());
    }
}
