
// WARNING:
// This file is automatically generated from a state machine .xml file.
// Any edits to this file will be lost during subsequent builds.
    
   
%start EventBuilderSM::Deployed

   
%class EventBuilder

   
%package icecube.daq.eventBuilder

   
%map EventBuilderSM
%%


      
// State definition
Deployed

// Entry actions-this state only, all entering transitions
Entry
{

              	enterDeployed();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitDeployed();

          
}

// Transition definitions-this state only
{
	// transition
	InitializeSig
              
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


          	// transition
	OfflineSig
              
		// next state
		Offline
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Offline", "OfflineSig");
		}


          	// transition
	DeploySig
              
		// next state
		Deployed
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Deployed", "DeploySig");
		}


          	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
              
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


          
}


      
// State definition
Offline

// Entry actions-this state only, all entering transitions
Entry
{

              	enterOffline();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitOffline();

          
}

// Transition definitions-this state only
{
	// transition
	OnlineSig
              
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "OnlineSig");
		}


          	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
              
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


          
}


      
// State definition
Idle

// Entry actions-this state only, all entering transitions
Entry
{

              	enterIdle();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitIdle();

          
}

// Transition definitions-this state only
{
	// transition
	OfflineSig
              
		// next state
		Offline
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Offline", "OfflineSig");
		}


          	// transition
	ConfigSig
              
		// next state
		Configuring
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Configuring", "ConfigSig");
		}


          	// transition
	InitializeSig
              
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


          	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
              
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


          
}


      
// State definition
Configuring

// Entry actions-this state only, all entering transitions
Entry
{

              	enterConfiguring();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitConfiguring();

          
}

// Transition definitions-this state only
{
	// transition
	Int_ConfigDoneSig
            
		// next state
		Ready
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Ready", "Int_ConfigDoneSig");
		}


         	// transition
	Int_ConfigFailSig
            
		// next state
		ConfigureRunDown
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "ConfigureRunDown", "Int_ConfigFailSig");
		}


         	// transition
	Int_ConfigAbandonSig
              
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_ConfigAbandonSig");
			abandonConfigure();
		}


          	// transition
	InitializeSig
              
		// next state
		ConfigureRunDown
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "ConfigureRunDown", "InitializeSig");
		}


          	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
ConfigureRunDown

// Entry actions-this state only, all entering transitions
Entry
{

              	enterConfigureRunDown();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitConfigureRunDown();

          
}

// Transition definitions-this state only
{
	// transition
	Int_ConfigRunDownCompleteSig
            
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "Int_ConfigRunDownCompleteSig");
		}


         	// transition
	InitializeSig
              
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


          	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
Ready

// Entry actions-this state only, all entering transitions
Entry
{

              	enterReady();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitReady();

          
}

// Transition definitions-this state only
{
	// transition
	StartSig
            
		// next state
		Running
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Running", "StartSig");
		}


         	// transition
	InitializeSig
            
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


         	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
Running

// Entry actions-this state only, all entering transitions
Entry
{

              	enterRunning();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitRunning();

          
}

// Transition definitions-this state only
{
	// transition
	ErrorSig
            
		// next state
		Error
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Error", "ErrorSig");
		}


         	// transition
	StopSig
            
		// next state
		Stopping
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Stopping", "StopSig");
			stopSigTransition();
		}


         	// transition
	Int_StopSig
            
		// next state
		Stopping
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Stopping", "Int_StopSig");
		}


         	// transition
	InitializeSig
              
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


          	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
Error

// Entry actions-this state only, all entering transitions
Entry
{

              	enterError();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitError();

          
}

// Transition definitions-this state only
{
	// transition
	InitializeSig
            
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


         	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
Stopping

// Entry actions-this state only, all entering transitions
Entry
{

              	enterStopping();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitStopping();

          
}

// Transition definitions-this state only
{
	// transition
	Int_StopRunDownCompleteSig
            
		// next state
		Stopped
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Stopped", "Int_StopRunDownCompleteSig");
		}


         	// transition
	ForcedStopSig
            
		// next state
		Stopped
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Stopped", "ForcedStopSig");
			forcedStopTransition();
		}


         	// transition
	InitializeSig
            
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


         	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
Stopped

// Entry actions-this state only, all entering transitions
Entry
{

              	enterStopped();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitStopped();

          
}

// Transition definitions-this state only
{
	// transition
	DisposeSig
            
		// next state
		Disposing
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Disposing", "DisposeSig");
		}


         	// transition
	InitializeSig
            
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


         	// transition
	ForcedStopSig
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "ForcedStopSig");
		}


         	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


      
// State definition
Disposing

// Entry actions-this state only, all entering transitions
Entry
{

              	enterDisposing();

          
}

// Exit actions-this state only, all exiting transitions
Exit
{

              	exitDisposing();

          
}

// Transition definitions-this state only
{
	// transition
	Int_DisposeCompleteSig
            
		// next state
		Ready
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Ready", "Int_DisposeCompleteSig");
		}


         	// transition
	ErrorSig
            
		// next state
		Error
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Error", "ErrorSig");
		}


         	// transition
	InitializeSig
            
		// next state
		Idle
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "Idle", "InitializeSig");
		}


         	// transition
	Int_Exception(name : String, e : Exception)
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Int_Exception(name : String, e : Exception)");
			handleException(name, e);
		}


          	// transition
	Default
            
		// next state
		nil
		{
			// Always log the state change locally
			setComponentState("EventBuilderSM", "nil", "Default");
			illegalTransition();
		}


         
}


   
%%

