/*
 * class: eventBuilderContextTest
 *
 * Version $Id: EventBuilderContextTest.java,v 1.6 2005/11/01 16:24:16 dglo Exp $
 *
 * Date: August 30 2004
 *
 * (c) 2004 IceCube Collaboration
 */

package icecube.daq.eventBuilder.test;

import icecube.daq.common.LocalStateInfo;

import junit.framework.TestCase;
import junit.framework.TestSuite;
import junit.framework.Test;

import java.lang.reflect.Method;

import java.util.HashMap;
import java.util.LinkedList;

/**
 * This class defines the tests that any eventBuilder object should pass.
 *
 * @version $Id: EventBuilderContextTest.java,v 1.6 2005/11/01 16:24:16 dglo Exp $
 * @author laura
 */
public class EventBuilderContextTest
        extends TestCase {


    private HashMap _transition_map = new HashMap();
    // list of pending state machine transitions
    private LinkedList _transition_queue = new LinkedList();
    // state machine context class instance
    private static EventBuilderContextTestContext testObject;
    private static LocalStateInfo stateInfo = null;
    // state machine request and execution counters
    private int transitionRequestCounter = 0;
    private int executionCounter = 0;
    private int entryCounter = 0;
    private int exitCounter = 0;
    // user action execution flags
    private boolean loadConfigurationExecuted = false;
    private boolean illegalTransitionExecuted = false;
    // state entry and exit flags
    private boolean enterDeployedExecuted = false;
    private boolean exitDeployedExecuted = false;
    private boolean enterIdleExecuted = false;
    private boolean exitIdleExecuted = false;
    private boolean enterOfflineExecuted = false;
    private boolean exitOfflineExecuted = false;
    private boolean enterConfiguringExecuted = false;
    private boolean exitConfiguringExecuted = false;
    private boolean enterConfigureRunDownExecuted = false;
    private boolean exitConfigureRunDownExecuted = false;
    private boolean enterReadyExecuted = false;
    private boolean exitReadyExecuted = false;
    private boolean enterRunningExecuted = false;
    private boolean exitRunningExecuted = false;
    private boolean enterPausedExecuted = false;
    private boolean exitPausedExecuted = false;
    private boolean enterStoppingExecuted = false;
    private boolean exitStoppingExecuted = false;
    private boolean enterStoppedExecuted = false;
    private boolean exitStoppedExecuted = false;
    private boolean enterDisposingExecuted = false;
    private boolean exitDisposingExecuted = false;
    private boolean enterErrorExecuted = false;
    private boolean exitErrorExecuted = false;
    private boolean forcedStopTransitionExecuted = false;
    private boolean handleExceptionExecuted = false;
    private boolean abandonConfigureExecuted = false;
    private boolean stopSigTransitionExecuted = false;

    // constructors

    /**
     * Create an instance of this class.
     * Default constructor is declared, but private, to stop accidental
     * creation of an instance of the class.
     */
    private EventBuilderContextTest() {
        this(null);

    }

    /**
     * Constructs and instance of this test.
     * @param name
     */
    public EventBuilderContextTest(String name) {
        super(name);
    }

    // instance member method (alphabetic)

    synchronized void transition(String trans_name) throws Exception {
        // count requests
        transitionRequestCounter++;
        // Add the transition to the queue.
        _transition_queue.add(trans_name);

        // Only if a transition is not in progress should a
        // transition be issued.
        if (testObject.isInTransition() == false) {
            String name;
            Method transition;
            Object[] args = new Object[0];

            while (_transition_queue.isEmpty() == false) {
                name = (String) _transition_queue.remove(0);
                transition = (Method) _transition_map.get(name);
                try {
                    transition.invoke(testObject, args);
                } catch (Exception x) {
                    throw x;
                }
            }
        }
    }

    public void setComponentState(String stateMachine,
                                  String state, String transition) {
        stateInfo.setCurrentState(stateMachine, state, transition);
    }

    // activities performed when entering the configuring state
    void illegalTransition() {
        illegalTransitionExecuted = true;
        executionCounter++;
    }

    // activities performed when entering the xxx state
    void LoadConfiguration() {
        loadConfigurationExecuted = true;
        executionCounter++;
    }

    // activities performed when entering the xxx state
    void enterDeployed() {
        enterDeployedExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitDeployed() {
        exitDeployedExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterIdle() {
        enterIdleExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitIdle() {
        exitIdleExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterOffline() {
        enterOfflineExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitOffline() {
        exitOfflineExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterConfiguring() {
        enterConfiguringExecuted = true;
        executionCounter++;
        entryCounter++;

        // assume config is done and move on to ready state
        try {
            this.transition(EventBuilderSigInterfaceTst.SIG_INT_CONFIGDONESIG);
        } catch (Exception e) {
            fail("Exception on SIG_CONFIGDONESIG");
        }
    }

    // activities performed when leaving the xxx state
    void exitConfiguring() {
        exitConfiguringExecuted = true;
        executionCounter++;
        exitCounter++;
    }


    // activities performed when entering the xxx state
    void enterConfigureRunDown() {
       enterConfigureRunDownExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when leaving the xxx state
    void exitConfigureRunDown() {
       exitConfigureRunDownExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterReady() {
        enterReadyExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitReady() {
        exitReadyExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterRunning() {
        enterRunningExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitRunning() {
        exitRunningExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterPaused() {
        enterPausedExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitPaused() {
        exitPausedExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterStopping() {
        enterStoppingExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitStopping() {
        exitStoppingExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterStopped() {
        enterStoppedExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitStopped() {
        exitStoppedExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterDisposing() {
        enterDisposingExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitDisposing() {
        exitDisposingExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the xxx state
    void enterError() {
        enterErrorExecuted = true;
        executionCounter++;
        entryCounter++;
    }

    // activities performed when leaving the xxx state
    void exitError() {
        exitErrorExecuted = true;
        executionCounter++;
        exitCounter++;
    }

    // activities performed when entering the configuring state
    void forcedStopTransition() {
        forcedStopTransitionExecuted = true;
        executionCounter++;
    }

    // activities performed when entering the configuring state
    void handleException(String name, Exception e) {
        handleExceptionExecuted = true;
        executionCounter++;
    }

    // activities performed when entering the configuring state
    void abandonConfigure() {
        abandonConfigureExecuted = true;
        executionCounter++;
    }

    void stopSigTransition() {
        stopSigTransitionExecuted = true;
        executionCounter++;
    }

    void clearAllExectutionFlags() {
        loadConfigurationExecuted = false;
        illegalTransitionExecuted = false;
        enterDeployedExecuted = false;
        exitDeployedExecuted = false;
        enterIdleExecuted = false;
        exitIdleExecuted = false;
        enterOfflineExecuted = false;
        exitOfflineExecuted = false;
        enterConfiguringExecuted = false;
        exitConfiguringExecuted = false;
        enterConfigureRunDownExecuted = false;
        exitConfigureRunDownExecuted = false;
        enterReadyExecuted = false;
        exitReadyExecuted = false;
        enterRunningExecuted = false;
        exitRunningExecuted = false;
        enterPausedExecuted = false;
        exitPausedExecuted = false;
        enterStoppingExecuted = false;
        exitStoppingExecuted = false;
        exitStoppingExecuted = false;
        enterStoppedExecuted = false;
        exitStoppedExecuted = false;
        enterDisposingExecuted = false;
        exitDisposingExecuted = false;
        enterErrorExecuted = false;
        exitErrorExecuted = false;
        forcedStopTransitionExecuted = false;
        handleExceptionExecuted = false;
        stopSigTransitionExecuted = false;
    }

    /**
     * Sets up the fixture, for example, open a network connection.
     * This method is called before a test is executed.
     */
    protected void setUp() {
    }

    /**
     * Tears down the fixture, for example, close a network connection.
     * This method is called after a test is executed.
     */
    protected void tearDown() {
        testObject = null;
        stateInfo = null;
    }

    /**
     * Explanation of test.
     */

    public void testStateMachineStartupToIdle()
        throws Exception
    {
        stateInfo = new LocalStateInfo();
        testObject = new EventBuilderContextTestContext(this);
        //testObject.setDebugFlag(true);
        this.clearAllExectutionFlags();
        transitionRequestCounter = 0;
        executionCounter = 0;
        entryCounter = 0;
        exitCounter = 0;

        this.transition(EventBuilderSigInterfaceTst.SIG_DEPLOYSIG);
        this.transition(EventBuilderSigInterfaceTst.SIG_INITIALIZESIG);

        // verify correct end state and status
        assertEquals("Incorrect number of ancillary routines executed",
                     2, executionCounter);
        assertEquals("Incorrect number of state entries encountered",
                     1, entryCounter);
        assertEquals("Incorrect number of state exits encountered",
                     1, exitCounter);
        assertEquals("Incorrect terminal state",
                     EventBuilderStateInterfaceTst.STATE_IDLE,
                     stateInfo.getCurrentState());

    }

    public void testMoveToReadyState()
        throws Exception
    {
        // bring a new state machine up to idle state
        testStateMachineStartupToIdle();
        this.clearAllExectutionFlags();
        transitionRequestCounter = 0;
        executionCounter = 0;
        entryCounter = 0;
        exitCounter = 0;

        // verify we are in idle state
        assertEquals("Incorrect initial state",
                     EventBuilderStateInterfaceTst.STATE_IDLE,
                     stateInfo.getCurrentState());

        this.transition(EventBuilderSigInterfaceTst.SIG_CONFIGSIG);

        // verify correct end state and status
        assertEquals("Incorrect number of transitions requested",
                     2, transitionRequestCounter);
        assertEquals("Incorrect number of ancillary routines executed",
                     4, executionCounter);
        assertEquals("Incorrect number of state entries encountered",
                     2, entryCounter);
        assertEquals("Incorrect number of state exits encountered",
                     2, exitCounter);
        assertEquals("Incorrect terminal state",
                     EventBuilderStateInterfaceTst.STATE_READY,
                     stateInfo.getCurrentState());

    }

    public void testIllegalTransitionBehavior()
        throws Exception
    {
        // bring a new state machine up to idle state
        testStateMachineStartupToIdle();
        this.clearAllExectutionFlags();
        transitionRequestCounter = 0;
        executionCounter = 0;
        entryCounter = 0;
        exitCounter = 0;

        // verify we are in idle state
        assertEquals("Incorrect initial state",
                     EventBuilderStateInterfaceTst.STATE_IDLE,
                     stateInfo.getCurrentState());

        this.transition(EventBuilderSigInterfaceTst.SIG_STARTSIG);

        // verify that illegalTransition() was executed
        assertTrue("Illegal transition request not logged",
                    illegalTransitionExecuted);

        // verify correct end state and status
        assertEquals("Incorrect number of transitions requested",
                     1, transitionRequestCounter);
        assertEquals("Incorrect number of ancillary routines executed",
                     1, executionCounter);
        assertEquals("Incorrect number of state entries encountered",
                     0, entryCounter);
        assertEquals("Incorrect number of state exits encountered",
                     0, exitCounter);
        assertEquals("Incorrect terminal state",
                     EventBuilderStateInterfaceTst.STATE_IDLE,
                     stateInfo.getCurrentState());

    }
    // static member methods (alphabetic)
    {
        try {
            Class context = EventBuilderContextTestContext.class;
            Class[] arguments = new Class[0];
            Method[] transitions = context.getDeclaredMethods();
            String name;
            int i;

            for (i = 0; i < transitions.length; i++) {
                name = transitions[i].getName();

                // Ignore the getState and getOwner methods.
                if (name.compareTo("getState") != 0 &&
                        name.compareTo("getOwner") != 0) {
                    _transition_map.put(name, transitions[i]);
                }
            }
        } catch (Exception ex) {
        }
    }

    /**
     * Create test suite for this class.
     */
    public static Test suite() {
        return new TestSuite(EventBuilderContextTest.class);
    }

    // Description of this object.
    // public String toString() {}

    /**
     * Main routine which runs text test in standalone mode.
     */
    public static void main(String args[]) {

        junit.textui.TestRunner.run(suite());
    }
}