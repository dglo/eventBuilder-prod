package icecube.daq.eventBuilder.test;

import icecube.daq.eventBuilder.monitoring.MonitoringData;

import icecube.daq.payload.ByteBufferCache;
import icecube.daq.payload.IByteBufferCache;
import icecube.daq.payload.MasterPayloadFactory;

import java.util.ArrayList;

import junit.framework.Test;
import junit.framework.TestSuite;

/**
 * Test event builder.
 */
public class EventBuilderEndToEndTest
    extends EBTestCase
{
    /**
     * Test event builder.
     *
     * @param name class name
     */
    public EventBuilderEndToEndTest(String name)
    {
        super(name);
    }

    /**
     * Process command-line arguments.
     *
     * @param args list of arguments
     */
    private static final void processArgs(String[] args)
    {
        boolean allValid = true;
        for (int i = 0; i < args.length; i++) {
            if (args[i].charAt(0) == '-') {
                if (args[i].charAt(1) == 'i') {
                    setIgnoreTearDown(true);
                } else if (args[i].charAt(1) == 'l') {
                    i++;
                    if (!setLogLevel(args[i])) {
                        System.err.println("Bad log level '" + args[i] +
                                           "'");
                        allValid = false;
                    }
                } else {
                    System.err.println("Unknown option '" + args[i] + "'");
                    allValid = false;
                }
            } else {
                System.err.println("Unknown argument '" + args[i] + "'");
                allValid = false;
            }
        }

        if (!allValid) {
            System.err.println("java EventBuilderEndToEndTest" +
                               " [-i(gnoreTearDown)]" +
                               " [-l logLevel]" +
                               "");
            System.exit(1);
        }
    }

    /**
     * Return suite of tests.
     *
     * @return test suite
     */
    public static Test suite()
    {
        return new TestSuite(EventBuilderEndToEndTest.class);
    }

    /**
     * Test no input.
     *
     * @throws Exception if there is a problem
     */
    public void testNothing()
        throws Exception
    {
        final int runNum = 1;

        StaticInputSource evtSrc = new StaticInputSource();
        evtSrc.setRunNumber(runNum);
        evtSrc.addStringProcessor(1, 20);

        IByteBufferCache bufMgr =
            new ByteBufferCache(256, 50000000, 50000000,
                                "EventBuilderEndToEndTest.testNothing()");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);
        dispatcher.setExpectedRunNumber(runNum);

        MonitoringData monData = new MonitoringData();

        initialize(evtSrc, bufMgr, masterFactory, dispatcher, monData, runNum);

        startAll(evtSrc);

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         0, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }
    }

    /**
     * Test a few hits without trigger requests.
     *
     * @throws Exception if there is a problem
     */
    public void testOnlyHits()
        throws Exception
    {
        final int runNum = 2;

        StaticInputSource evtSrc = new StaticInputSource();
        evtSrc.setRunNumber(runNum);
        evtSrc.addStringProcessor(1, 20);

        IByteBufferCache bufMgr =
            new ByteBufferCache(256, 50000000, 50000000,
                                "EventBuilderEndToEndTest.testOnlyHits()");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);
        dispatcher.setExpectedRunNumber(runNum);

        MonitoringData monData = new MonitoringData();

        initialize(evtSrc, bufMgr, masterFactory, dispatcher, monData, runNum);

        evtSrc.addHit(100, 1);
        evtSrc.addHit(100, 2);
        evtSrc.addHit(200, 1);
        evtSrc.addHit(200, 3);

        startAll(evtSrc);

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         0, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }
    }

    /**
     * Test a few trigger requests without hits.
     *
     * @throws Exception if there is a problem
     */
    public void testOnlyTriggers()
        throws Exception
    {
        final int runNum = 3;

        StaticInputSource evtSrc = new StaticInputSource();
        evtSrc.setRunNumber(runNum);
        evtSrc.addStringProcessor(1, 20);

        IByteBufferCache bufMgr =
            new ByteBufferCache(256, 50000000, 50000000,
                                "EventBuilderEndToEndTest.testOnlyTriggers()");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);
        dispatcher.setExpectedRunNumber(runNum);

        MonitoringData monData = new MonitoringData();

        initialize(evtSrc, bufMgr, masterFactory, dispatcher, monData, runNum);

        ArrayList rdOutList = new ArrayList();

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(31, 63));
        evtSrc.addTriggerRequest(rdOutList);

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(127, 255));
        evtSrc.addTriggerRequest(rdOutList);

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(511, 1023));
        evtSrc.addTriggerRequest(rdOutList);

        startAll(evtSrc);

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         0, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }
    }

    /**
     * Test a few trigger requests and hits.
     *
     * @throws Exception if there is a problem
     */
    public void testBothTiny()
        throws Exception
    {
        final int runNum = 4;

        StaticInputSource evtSrc = new StaticInputSource();
        evtSrc.setRunNumber(runNum);
        evtSrc.addStringProcessor(1, 20);

        IByteBufferCache bufMgr =
            new ByteBufferCache(256, 50000000, 50000000,
                                "EventBuilderEndToEndTest.testBothTiny()");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);
        dispatcher.setExpectedRunNumber(runNum);

        MonitoringData monData = new MonitoringData();

        initialize(evtSrc, bufMgr, masterFactory, dispatcher, monData, runNum);

        ArrayList rdOutList = new ArrayList();

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(100, 200));
        evtSrc.addTriggerRequest(rdOutList);

        evtSrc.addHit(110, 1);
        evtSrc.addHit(110, 2);

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(300, 400));
        evtSrc.addTriggerRequest(rdOutList);

        evtSrc.addHit(310, 1);
        evtSrc.addHit(310, 2);
        evtSrc.addHit(320, 1);
        evtSrc.addHit(320, 3);

        startAll(evtSrc);

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         2, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }
    }

    /**
     * Test multiple string processors.
     *
     * @throws Exception if there is a problem
     */
    public void testMultistring()
        throws Exception
    {
        final int runNum = 5;

        StaticInputSource evtSrc = new StaticInputSource();
        evtSrc.setRunNumber(runNum);
        evtSrc.addStringProcessor(1, 20);
        evtSrc.addStringProcessor(21, 10);
        evtSrc.addStringProcessor(51, 10);

        evtSrc.generateEngFmtHits();

        IByteBufferCache bufMgr =
            new ByteBufferCache(256, 50000000, 50000000,
                                "EventBuilderEndToEndTest.testMultistring()");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);
        dispatcher.setExpectedRunNumber(runNum);

        MonitoringData monData = new MonitoringData();
        assertEquals("Unexpected number of previous events",
                     0, monData.getPreviousRunTotalEvents());

        initialize(evtSrc, bufMgr, masterFactory, dispatcher, monData, runNum);

        ArrayList rdOutList = new ArrayList();

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(100, 200));
        evtSrc.addTriggerRequest(rdOutList);

        evtSrc.addHit(110, 1);
        evtSrc.addHit(110, 21);

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(300, 400));
        evtSrc.addTriggerRequest(rdOutList);

        evtSrc.addHit(310, 1);
        evtSrc.addHit(310, 21);
        evtSrc.addHit(320, 51);
        evtSrc.addHit(320, 13);
        evtSrc.addHit(320, 58);

        startAll(evtSrc);

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         2, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }
    }

    /**
     * Test multiple string processors through multiple runs.
     *
     * @throws Exception if there is a problem
     */
    public void testMultirun()
        throws Exception
    {
        final int runNum = 6;

        StaticInputSource evtSrc = new StaticInputSource();
        evtSrc.setRunNumber(runNum);
        evtSrc.addStringProcessor(1, 20);
        evtSrc.addStringProcessor(21, 10);
        evtSrc.addStringProcessor(51, 10);

        evtSrc.generateEngFmtHits();

        IByteBufferCache bufMgr =
            new ByteBufferCache(256, 50000000, 50000000,
                                "EventBuilderEndToEndTest.testMultirun()");
        MasterPayloadFactory masterFactory =
            new MasterPayloadFactory(bufMgr);

        MockDispatcher dispatcher = new MockDispatcher(masterFactory);
        dispatcher.setExpectedRunNumber(runNum);

        MonitoringData monData = new MonitoringData();
        assertEquals("Unexpected number of previous events",
                     0, monData.getPreviousRunTotalEvents());

        initialize(evtSrc, bufMgr, masterFactory, dispatcher, monData, runNum);

        ArrayList rdOutList = new ArrayList();

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(100, 200));
        evtSrc.addTriggerRequest(rdOutList);

        evtSrc.addHit(110, 1);
        evtSrc.addHit(110, 21);

        rdOutList.clear();
        rdOutList.add(buildGlobalRequest(300, 400));
        evtSrc.addTriggerRequest(rdOutList);

        evtSrc.addHit(310, 1);
        evtSrc.addHit(310, 21);
        evtSrc.addHit(320, 51);
        evtSrc.addHit(320, 13);
        evtSrc.addHit(320, 58);

        startAll(evtSrc);

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         2, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }

        assertEquals("Unexpected number of previous events",
                     0, monData.getPreviousRunTotalEvents());

        evtSrc.reset();
        dispatcher.reset();

        try {
            Thread.sleep(200);
        } catch (Exception ex) {
            // ignore
        }

        startAll(evtSrc);

        try {
            Thread.sleep(200);
        } catch (Exception ex) {
            // ignore
        }

        assertEquals("Unexpected number of previous events",
                     2, monData.getPreviousRunTotalEvents());

        mainLoop(monData);

        evtSrc.validateMonitoringData(monData, 2);
        assertTrue(bufMgr.toString(), bufMgr.isBalanced());

        if (dispatcher.getSaveEvents()) {
            assertEquals("Bad number of events",
                         2, dispatcher.getNumberOfEvents());

            evtSrc.validateEvents(dispatcher.events());
        }

        assertEquals("Unexpected number of previous events",
                     2, monData.getPreviousRunTotalEvents());
    }

    /**
     * Body of application.
     *
     * @param args command-line arguments
     */
    public static final void main(String[] args)
    {
        processArgs(args);

        junit.textui.TestRunner.run(suite());
    }
}
